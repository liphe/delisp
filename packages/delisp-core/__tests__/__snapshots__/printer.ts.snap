// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pretty Printer shold print definitions beautifully 1`] = `
"
(define x 10)"
`;

exports[`Pretty Printer shold print definitions beautifully 2`] = `
"
(define x
  (lambda (aaa
           bbb
           ccc
           ddd
           eee
           fff
           ggg
           hhh
           iii
           jjj
           kkk
           lll
           mmm
           nnn
           ooo
           ppp
           qqq
           rrr
           sss
           ttt
           uuu
           vvv
           www
           xx)
    xxx))"
`;

exports[`Pretty Printer should align nested function calls 1`] = `
"
(funcall aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         (fxyz 0 111 222)
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa)"
`;

exports[`Pretty Printer should align nested function calls 2`] = `
"
(funcall aaaaa aaaaa aaaaa (fxyz 0 111 222))"
`;

exports[`Pretty Printer should align nested function calls 3`] = `
"
(funcall aaaaa
         aaaaa
         aaaaa
         (fxyz 0
               111
               222
               333
               444
               555
               666
               777
               888
               999
               aaa
               bbb
               xxx
               yyy
               zzz
               www
               uuu
               ttt))"
`;

exports[`Pretty Printer should insert newlines 1`] = `
"
aaa
bbb
ccc"
`;

exports[`Pretty Printer should place all arguments of a function call in the next line if necessary 1`] = `
"
(this-is-a-very-long-and-ugly-function-name
 (axbxcxd (a b c d)
          (a b c d)
          (a b c d)
          (a b c d)
          (a b c d)))"
`;

exports[`Pretty Printer should preserve some empty lines 1`] = `
"
aaa
bbb

ccc
ddd

eee"
`;

exports[`Pretty Printer should pretty print a combination of lambda and function call 1`] = `
"
(foo (lambda (x y z)
       (funcall aaaaa
                aaaaa
                aaaaa
                (fxyz 0
                      111
                      222
                      333
                      444
                      555
                      666
                      777
                      888
                      999
                      aaa
                      bbb
                      xxx
                      yyy
                      zzz
                      www
                      uuu
                      ttt))))"
`;

exports[`Pretty Printer should print amll real code beautifully 1`] = `
"
(define bq-frob
  (lambda (x)
    (and (consp x) (or (eq (car x) *comma*) (eq (car x) *comma-atsign*)))))"
`;

exports[`Pretty Printer should print conditional expressions nicely 1`] = `
"
(if true 1 2)"
`;

exports[`Pretty Printer should print conditional expressions nicely 2`] = `
"
(if aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    1
    2)"
`;

exports[`Pretty Printer should print deeply nested function calls nicely 1`] = `
"
(function-call-1 (function-call-2 (function-call-3 (function-call-4
                                                    (function-call-5 3 4 5 6 7))))
                 30)"
`;

exports[`Pretty Printer should print lambda abstractions beautifully 1`] = `
"
(lambda (aaa bbb ccc) xxx)"
`;

exports[`Pretty Printer should print lambda abstractions beautifully 2`] = `
"
(lambda (aaa bbb ccc ddd eee fff ggg hhh iii jjj kkk lll mmm nnn ooo ppp qqq)
  xxx)"
`;

exports[`Pretty Printer should print lambda abstractions beautifully 3`] = `
"
(lambda (aaa
         bbb
         ccc
         ddd
         eee
         fff
         ggg
         hhh
         iii
         jjj
         kkk
         lll
         mmm
         nnn
         ooo
         ppp
         qqq
         rrr
         sss
         ttt
         uuu
         vvv
         www
         xx)
  xxx)"
`;

exports[`Pretty Printer should print lambda with multiple forms 1`] = `
"
(define hello
  (lambda (x)
    (print x)
    (print x)
    (print x)
    (print x)
    (print x)
    (print x)))"
`;

exports[`Pretty Printer should print let expressions nicely 1`] = `
"
(let ((x 10)
      (y 20))
  (+ x y))"
`;

exports[`Pretty Printer should print records with nested expressions 1`] = `
"
{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 20
 z (* 10 (+ 1 2))}"
`;

exports[`Pretty Printer should some real code 1`] = `
"
(define maptree
  (lambda (fn x)
    (if (atom x)
        (funcall fn x)
        (let ((a (funcall fn (car x)))
              (d (maptree fn (cdr x))))
          (if (and (eql a (car x)) (eql d (cdr x)))
              x
              (cons a d))))))"
`;
